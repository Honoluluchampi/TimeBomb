EXE = timebomb
OBJS = main.o Game.o
CC = gcc
CFLAGS = -Wall -O2
.SUFFIXES: .cpp .o

$(EXE) : $(OBJS)
	$(CC) $^ -o $@

.cpp.o:
	$(CC) $(CFLAGS) -c $<

# make clean
.PHONY: clean
clean:
	rm -f $(OBJS)

main.o : Game.h
Game.o : Game.h


COMPILER = gcc
# CXXFLAGS
ifeq "$(shell getconf LONG_BIT)" "64"
	LDFLAGS = -L/usr/local/
else
	LDFLAGS = -L/usr/local/lib
endif
LIBS = 
INCLUDE = -I../include -I/usr/local/include
TARGETS = timebomb.out
TARGETDIR = ../bin
SRCROOT = .
OBJROOT = ../OBJROOT
SRCDIRS := $(shell find $(SRCROOT) -type d)
SOURCES = $(foreach dir, $(SRCDIRS), $(wildcard $(dir)/*.cpp))
OBJECTS = $(addprefix $(OBJROOT)/, $(SOURCES:.cpp=.o))
OBJDIRS = $(addprefix $(OBJROOT)/, $(SRCDIRS))
DEPENDS = $(OBJECTS:.o=.d)

$(TARGETS) : $(OBJECTS) $(LIBS)
	$(COMPILER) -o $(TARGETDIR)/$@ $^ $(LDFLAGS)

$(OBJROOT)%.o : $(SRCROOT)/%.cpp
	@if [ ! -e 'dirname $@' ]; then mkdir -p 'dirname $@'; fi
	$(COMPILER) $(INCLUDE) -o $@ -c $<

-include $(DEPENDS)


TARGET = timebomb
TARGETDIR = ./bin

SRCROOT = .
OBJROOT = ./obj
SRCDIRS := $(shell find $(SRCROOT) -type d)
SOURCES = $(foreach dir, $(SRCDIRS), $(wildcard $(dir)/*.cpp))
OBJECTS = $(addprefix $(OBJROOT)/, $(notdir $(SOURCES:.cpp=.o)))
OBJDIRS = $(addprefix $(OBJROOT)/, $(SRCDIRS))

DEPENDS = $(OBJECTS:.o=.d)

COMPILER = gcc
CFLAGS = -Wall -O2
#.SUFFIXES: .cpp .o

$(TARGET) : $(OBJECTS) $(LIBS)
	$(COMPILER) $^ -o $(TARGETDIR)/$@

$(OBJDIR)/%.o : %.cpp
	$(COMPILER) -c $< -o $@ $(CFLAGS)
#.cpp.o:
#	$(COMPILER) $(CFLAGS) -c $<

# make clean
.PHONY: clean
clean:
	rm -f $(OBJS)

main.o : Game.h
Game.o : Game.h
