#pragma once
#include <SDL2/SDL.h>
#include <unordered_map>
#include <string>
#include <vector>
#include "Math.h"

// window
const float WIDTH = 1024.0f + 100.0f;
const float HEIGHT = 768.0f;
const float UPPER_LEFT_X = 100.0f;
const float UPPER_LEFT_Y = 100.0f;
// delta time
const int LEAST_FRAME_TICKS = 16;
const float DELTA_TIME_UPPER_LIMIT = 0.05f;

class Game
{
public:
  
  // Constracter
  Game();
  
  // Initializer
  bool Initialize();
  
  // Game Looper
  void RunLoop();
  
  // ShutDown Game
  void Shutdown();
  
  // Add or Remove Actor
  void AddActor(class Actor* actor);
  void RemoveActor(class Actor* actor);
  
  // Add Sprite
  void AddSprite(class SpriteComponent* sprite);
  void RemoveSprite(class SpriteComponent* sprite);
  
  SDL_Texture* GetTexture(const std::string& filename);

  void SetIsRunning(bool flag){mIsRunning = flag;}

private:
  // Helper functions for RunLoop()
  void ProcessInput();
  void UpdateGame();
  void GenerateOutput();
  // this function is tend to be game specific, 
  // so all apps should override this function to get game object
  virtual void LoadData() = 0;
  void UnloadData();
  
  // map of textures
  std::unordered_map<std::string, SDL_Texture*> mTextures;
  
  // All the sprite components drawn
  std::vector<class SpriteComponent*> mSprites;
  
  // the pointer of Window generated by SDL
  SDL_Window *mWindow;
  SDL_Renderer *mRenderer; // graphic organizer
  
  // continue instractor
  bool mIsRunning;
  // elapsed time from SDL_init
  Uint32 mTicksCount;
  
  // GameObject
  std::vector<class Actor*> mActors;
  std::vector<class Actor*> mPendingActors;
  
  bool mUpdatingActors;
};